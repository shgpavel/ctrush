<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article>
<article
  xml:lang="en"
  xmlns="http://docbook.org/ns/docbook" version="5.0"
  xmlns:xlink="http://www.w3.org/1999/xlink" >
  <info>
    <title>Trash specification</title>

    <releaseinfo>1.0</releaseinfo>
    <pubdate>2014-01-02</pubdate>

    <authorgroup>
    <author>
      <firstname>Mikhail</firstname>
      <surname>Ramendik</surname>
      <affiliation>
        <address>
          <email>mr@ramendik.ru</email>
        </address>
      </affiliation>
    </author>
    <author>
      <firstname>David</firstname>
      <surname>Faure</surname>
      <affiliation>
        <address>
          <email>faure@kde.org</email>
        </address>
      </affiliation>
    </author>

    <author>
      <firstname>Alexander</firstname>
      <surname>Larsson</surname>
      <affiliation>
        <address>
          <email>alexl@redhat.com</email>
        </address>
      </affiliation>
    </author>
    <author>
      <firstname>Ryan</firstname>
      <surname>Lortie</surname>
      <affiliation>
        <address>
          <email>desrt@desrt.ca</email>
        </address>
      </affiliation>
    </author>
    </authorgroup>
  </info>

  <section xml:id="abstract">
    <title>Abstract</title>
    <para>
      The purpose of this Specification is to provide a common way in
      which all “Trash can” implementations should store, list, and
      undelete trashed files. By complying with this Specification,
      various Trash implementations will be able to work with the same
      devices and use the same Trash storage. For example, if one
      implementation sends a file into the Trash can, another will be
      able to list it, undelete it, or clear it from the Trash.
    </para>
  </section>
  <section xml:id="introduction">
    <title>Introduction</title>
    <para>
      An ability to recover accidentally deleted files has become the
      de facto standard for today's desktop user experience.
    </para>
    <para>
      Users do not expect that anything they delete is permanently
      gone. Instead, they are used to a “Trash can” metaphor. A
      deleted document ends up in a “Trash can”, and stays there at
      least for some time — until the can is manually or automatically
      cleaned.
    </para>
    <para>
      This system has its own problems. Notably, cleaning disk space
      becomes a two-step operation — delete files and empty trash;
      this can lead to confusion for inexperienced users (“what's
      taking up my space?!”). Also, it is not easy to adapt the system
      to a multiuser environment. Besides, there is a potential for
      abuse by uneducated users — anecdotal evidence says they
      sometimes store important documents in the Trash can, and lose
      them when it gets cleaned!
    </para>
    <para>
      However, the benefits of this system are so great, and the user
      expectation for it so high, that it definitely should be
      implemented on a free desktop system. And in fact, several
      implementations existed before this specification — some as
      command line utilities, some as preloaded libraries, and some as
      parts of major desktop environments. For example, both Gnome and
      KDE had their own trash mechanisms.
    </para>
    <para>
      This Specification is to provide a common way in which all Trash
      can implementations must store trashed files. By complying with
      this Specification, various Trash implementations will be able
      to work with the same devices and use the same Trash storage.
    </para>
    <para>
      This ability is important, at least, for shared network
      resources, removable devices, and in cases when different
      implementations are used on the same machine at different
      moments (for example, some users prefer Gnome, others prefer
      KDE, and yet others are command-line fans).
    </para>
  </section>
  <section xml:id="scope-and-limitations">
    <title>Scope and limitations</title>
    <para>
      This Specification only describes the Trash storage. It does
      <emphasis role="strong">not</emphasis> limit the ways in which
      the actual implementations should operate, as long as they use
      the same Trash storage. Command line utilities,
      desktop-integrated solutions and preloaded libraries can work
      with this specification.
      <footnote>
        <para>
          However,
        developers of preloaded libraries should somehow work around
        the case when a desktop environment also supporting the Trash
        specification is run on top of them. “Double trashing” and
        “trashing of the trash” should be avoided.
        </para>
      </footnote>
    </para>
    <para>
      This Specification is geared towards the Unix file system tree
      approach. However, with slight modifications, it can easily be
      used with another kind of file system tree (for example, with
      drive letters).
    </para>
    <para>
      A multi-user environment, where users have specific numeric
      identifiers, is essential for this Specification.
    </para>
    <para>
      File systems and logon systems can be case-sensitive or
      non-case-sensitive; therefore, systems should generally not
      allow user names that differ only in case.
    </para>
  </section>
  <section xml:id="definitions">
    <title>Definitions</title>
    <para>
      Trash, or Trash can — the storage of files that were trashed
      (“deleted”) by the user. These files can be listed, undeleted,
      or cleaned from the trash can.
    </para>
    <para>
      Trashing — a “delete” operation in which files are transferred
      into the Trash can.
    </para>
    <para>
      Erasing — an operation in which files (possibly already in the
      Trash can) are removed (unlinked) from the file system. An
      erased file is generally considered to be non-recoverable; the
      space used by this file is freed. [A “shredding” operation,
      physically overwriting the data, may or may not accompany an
      erasing operation; the question of shredding is beyond the scope
      of this document].
    </para>
    <para>
      Original location — the name and location that a file (currently
      in the trash) had prior to getting trashed.
    </para>
    <para>
      Original filename — the name that a file (currently in the
      trash) had prior to getting trashed.
    </para>
    <para>
      Top directory , $topdir — the directory where a file system is
      mounted. “/” is the top directory for the root file system, but
      not for the other mounted file systems. For example, separate
      file systems might be mounted on “/home”, “/media/flash”, etc.
      In this text, the designation “$topdir” is used for “any top
      directory”.
    </para>
    <para>
      User identifier , $uid — the numeric user identifier for a user.
      $uid is used here as “the numeric user identifier of the user
      who is currently logged on”.
    </para>
    <para>
      Trash directory — a directory where trashed files, as well as
      the information on their original name/location and time of
      trashing, are stored. There may be several trash directories on
      one system; this Specification defines their location and
      contents. In this text, the designation “$trash” is used for
      “any trash directory”.
    </para>
    <para>
      “Home trash” directory — a user's main trash directory. Its name
      and location is defined in this document.
    </para>
    <para>
      The key words &quot;MUST&quot;, &quot;MUST NOT&quot;,
      &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
      &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;,
      &quot;RECOMMENDED&quot;, &quot;MAY&quot;, and
      &quot;OPTIONAL&quot; in this document are to be interpreted as
      described in
      <link xlink:href="http://www.faqs.org/rfcs/rfc2119.html">RFC
      2119</link>.
    </para>
  </section>
  <section xml:id="trash-directories">
    <title>Trash directories</title>
    <para>
      A system can have one or more trash directories. The contents of
      any trash directory are to be compliant with the same standard,
      described below.
    </para>
    <para>
      For every user
      <footnote>
        <para>
         To be more precise, for every user who can use the trash
         facility. In general, all human users, and possibly some
         “robotic” ones like ftp, should be able to use the trash
         facility.
        </para>
      </footnote>
      a “home trash” directory MUST be available. Its name and
      location are $XDG_DATA_HOME/Trash
      <footnote>
        <para>
         For case sensitive file systems, note the case.
        </para>
      </footnote>
      ; $XDG_DATA_HOME is the base directory for user-specific data, as
      defined in the
      <link xlink:href="http://www.freedesktop.org/Standards/basedir-spec">Desktop
      Base Directory Specification</link>.
    </para>
    <para>
      The “home trash” SHOULD function as the user's main trash
      directory. Files that the user trashes from the same file system
      (device/partition) SHOULD be stored here (see the next section
      for the storage details). A “home trash” directory SHOULD be
      automatically created for any new user. If this directory is
      needed for a trashing operation but does not exist, the
      implementation SHOULD automatically create it, without any
      warnings or delays.
    </para>
    <para>
      The implementation MAY also support trashing files from the rest
      of the system (including other partitions, shared network
      resources, and removable devices) into the “home trash”
      directory . This is a “failsafe” method: trashing works for all
      file locations, the user can not fill up any space except the
      home directory, and as other users generally do not have access
      to it, no security issues arise.
    </para>
    <para>
      However, this solution leads to costly file copying (between
      partitions, over the network, from a removable device, etc.) A
      delay instead of a quick “delete” operation can be unpleasant to
      users.
    </para>
    <para>
      An implementation MAY choose not to support trashing in some of
      these cases (notably on network resources and removable
      devices). This is what some well known operating systems do.
    </para>
    <para>
      It MAY also choose to provide trashing in the “top directories”
      of some or all mounted resources. This trashing is done in two
      ways, described below as (1) and (2).
    </para>
    <para>
      (1) An administrator can create an $topdir/.Trash directory. The
      permissions on this directories should permit all users who can
      trash files at all to write in it.; and the “sticky bit” in the
      permissions must be set, if the file system supports it.
    </para>
    <para>
      When trashing a file from a non-home
      partition/device
      <footnote>
        <para>
         To be more precise, from a partition/device different from the
         one on which $XDG_DATA_HOME resides.
        </para>
      </footnote>
      , an implementation (if it supports trashing in top directories)
      MUST check for the presence of $topdir/.Trash.
    </para>
    <para>
      When preparing a list of all trashed files (for example, to show
      to the user), an implementation also MUST check for .Trash in
      all top directories that are known to it.
    </para>
    <para>
      If this directory is present, the implementation MUST, by
      default, check for the “sticky bit”. (It MAY provide a way for
      the administrator, <emphasis>and only the
      administrator</emphasis>, to disable this checking for a
      particular top directory, in order to support file systems that
      do not have the “sticky bit”).
    </para>
    <para>
      The implementation also MUST check that this directory is not a
      symbolic link.
    </para>
    <para>
      If any of these checks fail, the implementation MUST NOT use
      this directory for either trashing or undeleting files, even if
      an appropriate $uid directory (see below) already exists in it.
      Besides, the implementation SHOULD report the failed check to
      the administrator, and MAY also report it to the user.
    </para>
    <para>
      The following paragraph applies ONLY to the case when the
      implementation supports trashing in the top directory, and a
      $topdir/.Trash exists and has passed the checks:
    </para>
    <para>
      If the directory exists and passes the checks, a subdirectory of
      the $topdir/.Trash directory is to be used as the user's trash
      directory for this partition/device. The name of this
      subdirectory is the numeric identifier of the current user
      ($topdir/.Trash/$uid). When trashing a file, if this directory
      does not exist for the current user, the implementation MUST
      immediately create it, without any warnings or delays for the
      user.
    </para>
    <para>
      (2) If an $topdir/.Trash directory is absent, an
      $topdir/.Trash-$uid directory is to be used as the user's trash
      directory for this device/partition. $uid is the user's numeric
      identifier.
    </para>
    <para>
      The following paragraph applies ONLY to the case when the
      implementation supports trashing in the top directory, and a
      $topdir/.Trash does not exist or has not passed the checks:
    </para>
    <para>
      When trashing a file, if an $topdir/.Trash-$uid directory does
      not exist, the implementation MUST immediately create it,
      without any warnings or delays for the user.
    </para>
    <para>
      When trashing a file, if this directory does not exist for the
      current user, the implementation MUST immediately create it,
      without any warnings or delays for the user.
    </para>
    <para>
      <emphasis role="strong">Notes.</emphasis> If an implementation
      provides trashing in top directories at all, it MUST support
      both (1) and (2).
    </para>
    <para>
      If an implementation does NOT provide trashing in top
      directories, and does provide the user with some interface to
      view and/or undelete trashed files, it SHOULD make a “best
      effort” to show files trashed in top directories (by both
      methods) to the user, among other trashed files or in a clearly
      accessible separate way.
    </para>
    <para>
      When trashing a file, if the method (1) fails at any point —
      that is, the $topdir/.Trash directory does not exist, or it
      fails the checks, or the system refuses to create an $uid
      directory in it — the implementation MUST, by default, fall back
      to method (2), described below. Except for the case when
      $topdir/.Trash fails the checks, the fallback must be immediate,
      without any warnings or delays. The implementation MAY, however,
      provide a way for the administrator to disable (2) completely.
    </para>
    <para>
      If both (1) and (2) fail (that is, no $topdir/.Trash directory
      exists, and an attempt to create $topdir/.Trash-$uid fails), the
      implementation MUST either trash the file into the user's “home
      trash” or refuse to trash it. The choice between these options
      can be pre-determined, or it can depend on the particular
      situation (for example, “no trashing of very large files”).
      However, if an implementation refuses to trash a file after a
      user action that generally causes trashing, it MUST clearly warn
      the user that the trashing has failed. It MUST NOT erase the
      file without user confirmation.
    </para>
    <para>
      For showing trashed files, implementations SHOULD support (1)
      and (2) at the same time (that is, if both $topdir/.Trash/$uid
      and $topdir/.Trash-$uid are present, it should list trashed
      files from both of them).
    </para>
  </section>
  <section xml:id="contents-of-a-trash-directory">
    <title>Contents of a trash directory</title>
    <para>
      The previous section has described the location of trash
      directories. This section concerns the contents of any trash
      directory (including the “home trash” directory). This trash
      directory will be named “$trash” here.
    </para>
    <para>
      A trash directory contains two subdirectories, named
      <emphasis role="strong">info</emphasis> and
      <emphasis role="strong">files</emphasis>.
    </para>
    <para>
      The <emphasis role="strong">$trash/files</emphasis> directory
      contains the files and directories that were trashed. When a
      file or directory is trashed, it MUST be moved into this
      directory
      <footnote>
        <para>
         “$trash/files/”, <emphasis role="strong">not</emphasis> into “$trash/” as in
         many existing implementations!
        </para>
      </footnote>
      . The names of files in this directory are to be determined by
      the implementation; the only limitation is that they must be
      unique within the directory. <emphasis>Even if a file with the
      same name and location gets trashed many times, each subsequent
      trashing must not overwrite a previous copy.</emphasis> The
      access rights, access time, modification time and extended
      attributes (if any) for a file/directory in $trash/files SHOULD
      be the same as the file/directory had before getting trashed.
    </para>
    <para>
      <emphasis role="strong">IMPORTANT NOTE. While an implementation
      may choose to base filenames in the $trash/files directory on
      the original filenames, this is never to be taken for
      granted
      <footnote>
        <para>
         At least because another implementation might trash files into
         the same trash directory
        </para>
      </footnote>.
      A filename in the $trash/files directory MUST NEVER be used to
      recover the original filename; use the info file (see below) for
      that.</emphasis> (If an info file corresponding to a
      file/directory in $trash/files is not available, this is an
      emergency case, and MUST be clearly presented as such to the
      user or to the system administrator).
    </para>
    <para>
      The <emphasis role="strong">$trash/info</emphasis> directory
      contains an “information file” for every file and directory in
      $trash/files. This file MUST have exactly the same name as the
      file or directory in $trash/files, plus the extension
      “.trashinfo”
      <footnote>
        <para>
         For example, if the file in $trash/files is named foo.bar , the
         corresponding file in $trash/info MUST be named
         foo.bar.trashinfo
        </para>
      </footnote>.
    </para>
    <para>
      The format of this file is similar to the format of a desktop
      entry file, as described in the
      <link xlink:href="http://www.freedesktop.org/Standards/desktop-entry-spec">Desktop
      Entry Specification</link> . Its first line must be [Trash
      Info].
    </para>
    <para>
      It also must have two lines that are key/value pairs as
      described in the Desktop Entry Specification:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          The key “Path” contains the original location of the
          file/directory, as either an absolute pathname (starting
          with the slash character “/”) or a relative pathname
          (starting with any other character). A relative pathname is
          to be from the directory in which the trash directory
          resides (for example, from $XDG_DATA_HOME for the “home
          trash” directory); it MUST not include a “..” directory, and
          for files not “under” that directory, absolute pathnames
          must be used. The system SHOULD support absolute pathnames
          only in the “home trash” directory, not in the directories
          under $topdir.
        </para>
        <para>
          The value type for this key is “string”; it SHOULD store the
          file name as the sequence of bytes produced by the file
          system, with characters escaped as in URLs (as defined by
          <link xlink:href="http://www.faqs.org/rfcs/rfc2396.html">RFC
          2396</link>, section 2).
        </para>
      </listitem>
      <listitem>
        <para>
          The key “DeletionDate” contains the date and time when the
          file/directory was trashed. The date and time are to be in
          the YYYY-MM-DDThh:mm:ss format (see
          <link xlink:href="http://www.faqs.org/rfcs/rfc3339.html">RFC
          3339</link>). The time zone should be the user's (or
          filesystem's) local time. The value type for this key is
          “string”.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Example:
    </para>
    <programlisting>
[Trash Info]
Path=foo/bar/meow.bow-wow
DeletionDate=20040831T22:32:08
</programlisting>
    <para>
      The implementation MUST ignore any other lines in this file,
      except the first line (must be [Trash Info]) and these two
      key/value pairs. If a string that starts with “Path=” or
      “DeletionDate=” occurs several times, the first occurence is to
      be used.
      <footnote>
        <para>
         This provides for future extension
        </para>
      </footnote>
    </para>
    <para>
      Note that $trash/info has no subdirectories. For a directory in
      $trash/files, only an information file for its own name is
      needed. This is because, when a subdirectory gets trashed, it
      must be moved to $trash/files with its entire contents. The
      names of the files and directories within the directory MUST NOT
      be altered; the implementation also SHOULD preserve the access
      and modification time for them.
    </para>
    <para>
      When trashing a file or directory, the implementation MUST
      create the corresponding file in $trash/info first. Moreover, it
      MUST try to do this in an atomic fashion, so that if two
      processes try to trash files with the same filename this will
      result in two different trash files. On Unix-line systems this
      is done by generating a filename, and then opening with O_EXCL.
      If that succeeds the creation was atomic (at least on the same
      machine), if it fails you need to pick another filename.
    </para>
  </section>
  <section xml:id="directory-size-cache">
    <title>Directory size cache</title>
    <para>
      In order to speed up the calculation of the total size of a
      particular trash directory, implementations (since version 1.0
      of this specification) SHOULD create or update the
      <emphasis role="strong">$trash/directorysizes</emphasis> file,
      which is a cache of the sizes of the directories that were
      trashed into this trash directory. Individual trashed files are
      not present in this cache, since their size can be determined
      with a call to stat().
    </para>
    <para>
      Each entry contains the name and size of the trashed directory,
      as well as the modification time of the corresponding
      <emphasis role="strong">trashinfo file</emphasis> (IMPORTANT:
      not the modification time of the directory
      itself)
      <footnote>
        <para>
         Rationale: If an older trash implementation restores a trashed directory,
         adds files to a nested subdir and trashes it again, the
         modification time of the directoy didn't change, so it is not
         a good indicator. However the modification time of the
         trashinfo file will have changed, since it is always the time
         of the actual trashing operation.
        </para>
      </footnote>.
    </para>
    <para>
      The size is calculated as the disk space used by the directory
      and its contents, that is, the size of the blocks, in bytes (in
      the same way as the `du -B1` command calculates).
    </para>
    <para>
      The modification time is stored as an integer, the number of
      seconds since Epoch. Implementations SHOULD use at least 64 bits
      for this number in memory.
    </para>
    <para>
      The “directorysizes” file has a simple text-based format, where
      each line is:
    </para>
    <programlisting>
[size] [mtime] [percent-encoded-directory-name]
</programlisting>
    <para>
      Example:
    </para>
    <programlisting>
16384 15803468 Documents
8192 15803582 Another_Folder
</programlisting>
    <para>
      The last entry on each line is the name of the trashed
      directory, stored as the sequence of bytes produced by the file
      system, with characters escaped as in URLs (as defined by
      <link xlink:href="http://www.faqs.org/rfcs/rfc2396.html">RFC
      2396</link>, section 2). Strictly speaking, percent-encoding is
      really only necessary for the newline character and for '%'
      itself. However, encoding all control characters or fully
      applying RFC 2396 for consistency with trashinfo files is
      perfectly valid, and even if an implementation does not use such
      encoding. it MUST be able to read names encoded with it.
    </para>
    <para>
      The character '/' is not allowed in the directory name (even as
      %2F), since all these directories must be direct children of the
      &quot;files&quot; directory. Absolute paths are not allowed for
      the same reason.
    </para>
    <para>
      To update the directorysizes file, implementations MUST use a
      temporary file followed by an atomic rename() operation, in
      order to avoid corruption due to two implementations writing to
      the file at the same time. The fact that the changes from one of
      the writers could get lost isn't an issue, as the cache can be
      updated again later on to add that entry.
    </para>
  </section>
  <section xml:id="non-normative-suggested-algorithm-for-calculating-the-size-of-a-trash-directory">
    <title>Non-normative: suggested algorithm for calculating the size
    of a trash directory</title>
    <programlisting>
load directorysizes file into memory as a hash directory_name -&gt; (size, mtime, seen=false)
totalsize = 0
list &quot;files&quot; directory, and for each item:
  stat the item
  if a file:
      totalsize += file size
  if a directory:
      stat the trashinfo file to get its mtime
      lookup entry in hash
      if no entry found or entry's cached mtime != trashinfo's mtime:
          calculate directory size (from disk)
          totalsize += calculated size
          add/update entry in hash (size of directory, trashinfo's mtime, seen=true)
      else:
          totalsize += entry's cached size
          update entry in hash to set seen=true
done
remove entries from hash which have (seen == false)
write out hash back to directorysizes file
</programlisting>
  </section>
  <section xml:id="implementation-notes">
    <title>Implementation notes</title>
    <para>
      The names of the files/directories in $trash/info SHOULD be
      somehow related to original file names. This can help manual
      recovery in emergency cases (for example, if the corresponding
      info file is lost).
    </para>
    <para>
      When trashing a file or directory, the implementation SHOULD
      check whether the user has the necessary permissions to delete
      it, before starting the trashing operation itself.
    </para>
    <para>
      When copying, rather than moving, a file into the trash (when
      trashing to the “home trash” from a different partition), exact
      preservation of permissions might be impossible. Notably, a
      file/directory that was owned by another user will now be owned
      by this user (changing owners is usually only available to
      root). This SHOULD NOT cause the trashing operation to fail.
    </para>
    <para>
      In this same situation, setting the permissions should be done
      <emphasis>after</emphasis> writing the copied file, as they
      might make it unwriteable..
    </para>
    <para>
      A trashing operation might be refused because of insufficient
      permissions, even when the user does have the right to delete a
      file or directory. This may happen when the user has the right
      to delete a file/directory, but not to read it (or, in the case
      of a directory, to list it). In this case, the best solution is
      probably to warn the user, offering options to delete the
      file/directory or leave it alone. As noted earlier, when the
      user reasonably expects a file to be trashed, the implementation
      MUST NOT delete it without warning the user.
    </para>
    <para>
      Automatic trash cleaning may, and probably eventually should, be
      implemented. But the implementation should be somehow known to
      the user.
    </para>
    <para>
      If a directory was trashed in its entirety, it is easiest to
      undelete it or remove it from the trash only in its entirety as
      well, not as separate files. The user might not have the
      permissions to delete some files in it even while they do have
      the permission to delete the directory!
    </para>
    <para>
      <emphasis role="strong">Important note on scope</emphasis>. This
      specification currently does NOT define trashing on remote
      machines where multiuser permissions are implemented but the
      numeric user ID is not supported, like FTP sites and CIFS
      shares. In systems implementing this specification, trashing of
      files from such machines is to be done only to the user's home
      trash directory (if at all). A future version may address this
      limitation.
    </para>
  </section>
  <section xml:id="administrativia">
    <title>Administrativia</title>
    <section xml:id="copyright-and-license">
      <title>Copyright and License</title>
      <para>
        Copyright (C) 2004-2014 Mikhail Ramendik ,
        <email>mr@ramendik.ru</email> .
      </para>
      <para>
        The originators of the ideas that are described here did not
        object to this copyright. The author is ready to transfer the
        copyright to a standards body that would be committed to
        keeping this specification, or any successor to it, an open
        standard.
      </para>
      <para>
        The license: Use and distribute as you wish. If you make a
        modified version and redistribute it, (a) keep the name of the
        author and contributors somewhere, and (b) indicate that this
        is a modified version.
      </para>
      <para>
        Implementation under any license at all is explicitly allowed.
      </para>
    </section>
    <section xml:id="location">
      <title>Location</title>
      <para>
        <link xlink:href="http://standards.freedesktop.org/trash-spec/trashspec-latest.html">http://standards.freedesktop.org/trash-spec/trashspec-latest.html</link>
        .
      </para>
    </section>
    <section xml:id="version-history">
      <title>Version history</title>
      <para>
        0.1 “First try”, August 30, 2004. Initial draft.
        “Implementation notes” not written as yet.
      </para>
      <para>
        0.2 August 30, 2004. Updated with feedback by Alexander
        Larsson <email>alexl@redhat.com</email> and by Dave
        Cridland <email>dave@cridland.net</email>
      </para>
      <para>
        0.3 September 8, 2004. Changed the name and location of the
        “home trash” directory, and introduced the generic term “home
        trash”. Changed the trash info file format to a .desktop-like
        one. Added directions on creation of info files and copying of
        trashed files. Changed user names to user ids. Added
        implementation notes. Added a copyright notice.
      </para>
      <para>
        0.4 September 9, 2004. Changed [Trash entry] to [Trash info]
        and fixed some typo's
      </para>
      <para>
        0.5 September 9, 2004. Changed [Trash info] to [Trash Info]
      </para>
      <para>
        0.6 October 8, 2004. Corrections by Alexander Larsson
        <email>alexl@redhat.com</email>. Also added “note on
        scope”. Cleaned up HTML. Added a link to this document on the
        freedesktop.org standards page
      </para>
      <para>
        0.7 April 12, 2005. Added URL-style encoding for the name of
        the deleted file, as implemented in KDE 3.4
      </para>
      <para>
        0.8 March 14, 2012. Update David Faure's email address, fix
        permanent URL for this spec.
      </para>
      <para>
        1.0 January 2, 2014. Add directorysizes cache; style review.
      </para>
    </section>
  </section>

</article>
